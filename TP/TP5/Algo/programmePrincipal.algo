/* 
Cette procédure permet l'affichage du menu
Parametre : Aucun
Pré-conditions : Aucune
*/
Procedure menu(;)
Debut
	Avec :
	
	Afficher "--- Menu ---"
	Afficher "1- Parcours largeur "
	Afficher "2- Parcours prefixe"
	Afficher "3- Parcours infixe"
	Afficher "4- Parcours postfixe"
	Afficher "5- Hauteur de l'arbre"
	Afficher "6- Quitter"
	Afficher "Votre choix :"
Fin

/* 
Cette fonction permet de générer le jeu d'essais demandé dans le TP
Parametre : Aucun
Pré-conditions : Aucune
Retourne un arbre avec les valeurs demandées dans le TP
*/
Fonction enracinerJeuxDessais() Retourne Abin
Debut
	Avec : 
		a : Abin
		ag : Abin
		ad : Abin
		
	ad <- enracine('t', init(), init())
	a <- enracine('s', ad, init())
	ad <- a
	ag <- enracine('v', init(), init())
	a <- enracine('r', ag, ad)
	ad <- enracine('b', init(), init())
	ag <- enracine('q', init(), init())
	ad <- enracine('p', ag, ad)
	ag <- enracine('v', init(), init())
	ag <- enracine('t', ag, ad)
	a <- enracine('a', a, ag)
	Retourne a
Fin

Avec : 
	Module Abin
Programme Principal 
Debut 
	Avec : 
		choix : Entier
		a : Abin
		Procedure menu(;)
		Fonction enracinerJeuxDessais() Retourne Abin
	
	a <- init()
	a <- enracinerJeuxDessais()
	
	Repeter 
		menu(;)
		Saisir choix
		Controler choix > 0 ET choix <= 5
		
		Selon choix Faire
			Cas 1 : //Parcours largeur
				Si estVide(a) Alors 
					Afficher "L'arbre est vide"
				Sinon
					afficherParcoursLargeur(a;)
				FinSi
			Cas 2 : //Parcours prefixe
				Si estVide(a) Alors 
					Afficher "L'arbre est vide"
				Sinon
					afficherParcoursPrefixe(a;)
				FinSi
			Cas 3 : //Parcours infixe
				Si estVide(a) Alors 
					Afficher "L'arbre est vide"
				Sinon
					afficherParcoursInfixe(a;)
				FinSi
			Cas 4 : //Parcours postfixe
				Si estVide(a) Alors 
					Afficher "L'arbre est vide"
				Sinon
					afficherParcoursPostfixe(a;)
				FinSi
			Cas 5 : //Hauteur de l'arbre
				Afficher "Hauteur de l'arbre : ", hauteur(a)
			Defaut : //Quitter
				Afficher "Au revoir !"
		FinFaire
	TantQue choix != 6
	
	desinit(a;a)
Fin 